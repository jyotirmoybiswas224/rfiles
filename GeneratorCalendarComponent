import React, { useState, useRef, useEffect } from "react";
import {
	format,
	startOfMonth,
	endOfMonth,
	eachDayOfInterval,
	isSameMonth,
	getDay,
	setYear,
	setMonth,
	parseISO,
} from "date-fns";
import { IoIosArrowBack, IoIosArrowForward } from "react-icons/io";
import { SERVICE_STATUS, SERVICE_TYPES } from "../../../../../../../../../utils/constants";
import {
	formatDateString,
	formatTimeString,
	formatUtcDateString,
} from "../../../../../../../../../utils/helpers";

const CalendarWithTimeSlots = ({ allServices = [], startDate = new Date(), wholeCalender = true, showNavButtons = true, timeZone }) => {
	const normalizeDate = (date) => {
		return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
	};
	
	const [currentDate, setCurrentDate] = useState(normalizeDate(startDate));
	const [selectedDate, setSelectedDate] = useState(normalizeDate(new Date()));
	const [isSelectingDate, setIsSelectingDate] = useState(false);
	const datePickerRef = useRef(null);
	const monthStart = startOfMonth(currentDate);
	const monthEnd = endOfMonth(currentDate);

	const monthDays = eachDayOfInterval({ start: monthStart, end: monthEnd });
	const startDay = getDay(monthStart);
	const daysWithEmptyCells = [
		...Array(startDay).fill(null),
		...monthDays
	];

	const weekDays = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
	const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
	const years = Array.from({ length: 21 }, (_, i) => currentDate.getFullYear() - 10 + i);

	const isToday = (date) => {
		if (!date) return false;
		const todayUTC = normalizeDate(new Date());
		const dateUTC = normalizeDate(date);
		return dateUTC.getTime() === todayUTC.getTime();
	};

	useEffect(() => {
		const handleClickOutside = (event) => {
			if (datePickerRef.current && !datePickerRef.current.contains(event.target)) {
				setIsSelectingDate(false);
			}
		};

		document.addEventListener("mousedown", handleClickOutside);
		return () => {
			document.removeEventListener("mousedown", handleClickOutside);
		};
	}, [datePickerRef]);

	const handleDateClick = (date) => {
		if (date) {
			setSelectedDate(normalizeDate(date));
		}
	};

	const handlePrevMonth = () => {
		setCurrentDate((prevDate) => normalizeDate(new Date(prevDate.getFullYear(), prevDate.getMonth() - 1, 1)));
	};

	const handleNextMonth = () => {
		setCurrentDate((prevDate) => normalizeDate(new Date(prevDate.getFullYear(), prevDate.getMonth() + 1, 1)));
	};

	const handleToday = () => {
		const todayUTC = normalizeDate(new Date());
		setCurrentDate(todayUTC);
		setSelectedDate(todayUTC);
	};

	const handleMonthYearClick = () => {
		setIsSelectingDate(true);
	};

	const handleMonthChange = (event) => {
		const newMonth = parseInt(event.target.value, 10);
		setCurrentDate((prevDate) => normalizeDate(new Date(prevDate.getFullYear(), newMonth, 1)));
	};

	const handleYearChange = (event) => {
		const newYear = parseInt(event.target.value, 10);
		setCurrentDate((prevDate) => normalizeDate(new Date(newYear, prevDate.getMonth(), 1)));
	};
	const getFormattedServiceDate = (timestamp) => {
		if (!timestamp) return null;
		return formatUtcDateString(timestamp.toDate().toUTCString());
	};

	const renderTodaysButton = (day, index) => {
		if (!day) {
			return <div className="min-h-6 min-w-6 md:h-10 md:w-10"></div>;
		}

		const normalizedDay = normalizeDate(day);
		const dayFormatString = normalizedDay.toUTCString();
		const formattedDay = formatUtcDateString(dayFormatString);
		const isCurrentDateToday = isToday(day);
		const todayNormalized = normalizeDate(new Date());
		const isPastDay = normalizedDay < todayNormalized;
		
		const servicesForDay = Array.isArray(allServices)
			? allServices.filter((el) => {
				if (!el.date) return false;
				const serviceDate = getFormattedServiceDate(el.date);
				return serviceDate === formattedDay;
			})
			: [];
			
		const completedServicesOnThisDay = Array.isArray(allServices)
			? allServices.filter((el) => {
				if (!el.completedAt&&el.status==SERVICE_STATUS.COMPLETE) return false;
				const completedDate = getFormattedServiceDate(el.completedAt);
				return completedDate == formattedDay;
			})
			: [];

		const hasUnloggedServices = isPastDay && servicesForDay.some(service => 
			service.status === "PENDING" || service.status === "INPROGRESS"||service.status === "CLOSED"
		);

		const hasCompletedServices = completedServicesOnThisDay.length > 0;

		const containerClasses = isCurrentDateToday
			? "min-h-6 min-w-6 md:h-10 md:w-10 border border-red-500 border-[3px] flex items-center justify-center"
			: "min-h-6 min-w-6 md:h-10 md:w-10 flex items-center justify-center";

		if (!servicesForDay.length && !completedServicesOnThisDay.length) {
			let buttonClasses = "h-8 w-8 rounded-full flex items-center justify-center text-cardTextGray";
			
		

			return (
				<div className={containerClasses}>
					<button
						key={day.toString()}
						onClick={() => handleDateClick(day)}
						className={buttonClasses}
						disabled={!isSameMonth(day, currentDate)}
					>
						{format(day, "d")}
					</button>
				</div>
			);
		} 
		else if (hasCompletedServices && hasUnloggedServices) {
			return (
				<div className={containerClasses}>
					<div className="h-8 w-8 rounded-full relative overflow-hidden flex items-center justify-center">
						<div className="absolute left-0 top-0 w-4 h-8 border-t border-b border-l border-gray-500 rounded-l-full"></div>
						<div className="absolute right-0 top-0 w-4 h-8 bg-gray-500 rounded-r-full"></div>
						<p className="z-10 text-cardTextGray">{format(day, "d")}</p>
					</div>
				</div>
			);
		}
		else if (hasCompletedServices) {
			return (
				<div className={containerClasses}>
					<button
						key={day.toString()}
						onClick={() => handleDateClick(day)}
						className="h-8 w-8 rounded-full flex items-center justify-center bg-gray-500 text-white"
						disabled={!isSameMonth(day, currentDate)}
					>
						{format(day, "d")}
					</button>
				</div>
			);
		}
		else if (hasUnloggedServices) {
			return (
				<div className={containerClasses}>
					<button
						key={day.toString()}
						onClick={() => handleDateClick(day)}
						className="h-8 w-8 rounded-full flex items-center justify-center border border-gray-500 bg-transparent text-black"
						disabled={!isSameMonth(day, currentDate)}
					>
						{format(day, "d")}
					</button>
				</div>
			);
		}
		else {
			const allServicesToConsider = [...servicesForDay, ...completedServicesOnThisDay];
			const allServiceTypes = allServicesToConsider.map((service) => service?.scheduleData?.serviceType).join(" ");

			if (
				allServiceTypes.includes(SERVICE_TYPES.MEDICAL_WASTE) &&
				allServiceTypes.includes(SERVICE_TYPES.PAPER_SHREDDING)
			) {
				return (
					<div className={containerClasses}>
						<button
							key={day.toString()}
							onClick={() => handleDateClick(day)}
							className="h-8 w-8 rounded-full flex items-center justify-center text-white relative"
							disabled={!isSameMonth(day, currentDate)}
						>
							<div className="w-4 h-8 bg-primaryGreen rounded-l-full absolute left-0"></div>
							<div className="w-4 h-8 bg-red-500 rounded-r-full absolute right-0"></div>
							<p className="z-10">{format(day, "d")}</p>
						</button>
					</div>
				);
			} else if (allServiceTypes.includes(SERVICE_TYPES.MEDICAL_WASTE)) {
				return (
					<div className={containerClasses}>
						<button
							key={day.toString()}
							onClick={() => handleDateClick(day)}
							className="h-8 w-8 rounded-full flex items-center justify-center bg-red-500 text-white"
							disabled={!isSameMonth(day, currentDate)}
						>
							{format(day, "d")}
						</button>
					</div>
				);
			} else if (allServiceTypes.includes(SERVICE_TYPES.PAPER_SHREDDING)) {
				return (
					<div className={containerClasses}>
						<button
							key={day.toString()}
							onClick={() => handleDateClick(day)}
							className="h-8 w-8 rounded-full flex items-center justify-center bg-primaryGreen text-white"
							disabled={!isSameMonth(day, currentDate)}
						>
							{format(day, "d")}
						</button>
					</div>
				);
			} else {
				return (
					<div className={containerClasses}>
						<button
							key={day.toString()}
							onClick={() => handleDateClick(day)}
							className={`h-8 w-8 rounded-full flex items-center justify-center text-cardTextGray
								${normalizeDate(day).getTime() === normalizeDate(selectedDate).getTime() && !isToday(day) ? "bg-green-200" : ""}`}
							disabled={!isSameMonth(day, currentDate)}
						>
							{format(day, "d")}
						</button>
					</div>
				);
			}
		}
	};

	return (
		<div
			className={`w-full text-calendarHeading min-h-80p mx-auto flex flex-col gap-5 shadow-xl rounded-xl p-5 ${
				new Date().getFullYear() === currentDate.getFullYear() &&
				new Date().getMonth() === currentDate.getMonth() &&
				!wholeCalender
					? "border-2 border-solid border-red-500"
					: ""
			}`}
		>
			<div className="flex items-center justify-between mb-2">
				<div className="relative" ref={datePickerRef}>
					<button
						onClick={wholeCalender ? handleMonthYearClick : () => {}}
						className="text-lg xl:pl-1 font-bold focus:outline-none"
					>
						{format(currentDate, "MMM yyyy")}
					</button>
					{isSelectingDate && (
						<div className="absolute top-full left-0 mt-1 bg-white border border-gray-300 rounded shadow-lg p-2 z-10">
							<select
								value={currentDate.getMonth()}
								onChange={handleMonthChange}
								className="block w-full mb-2 p-1 border border-gray-300 rounded"
							>
								{months.map((month, index) => (
									<option key={month} value={index}>
										{month}
									</option>
								))}
							</select>
							<select
								value={currentDate.getFullYear()}
								onChange={handleYearChange}
								className="block w-full p-1 border border-gray-300 rounded"
							>
								{years.map((year) => (
									<option key={year} value={year}>
										{year}
									</option>
								))}
							</select>
						</div>
					)}
				</div>
				
				{showNavButtons && (
					<div className="flex items-center">
						<button onClick={handlePrevMonth} className="mr-2">
							<IoIosArrowBack />
						</button>
						<button onClick={handleNextMonth}>
							<IoIosArrowForward />
						</button>
					</div>
				)}
			</div>
			<div className="grid grid-cols-7 gap-1">
				{weekDays.map((day) => (
					<div key={day} className="text-center font-medium">
						{day}
					</div>
				))}
			</div>
			<div className="grid grid-cols-7 gap-1">
				{daysWithEmptyCells.map((day, index) => (
					<div key={index} className="flex justify-center">
						{day ? renderTodaysButton(day, index) : <div className="min-h-6 min-w-6 md:h-10 md:w-10"></div>}
					</div>
				))}
			</div>
		</div>
	);
};

export default CalendarWithTimeSlots
