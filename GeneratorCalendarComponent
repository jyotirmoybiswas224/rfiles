import React, { useState, useRef, useEffect } from "react";
import {
	format,
	startOfMonth,
	endOfMonth,
	eachDayOfInterval,
	isSameMonth,
	getDay,
	setYear,
	setMonth,
} from "date-fns";
import { IoIosArrowBack, IoIosArrowForward } from "react-icons/io";
import { SERVICE_TYPES } from "../../../../../../../../../utils/constants";

const CalendarWithTimeSlots = ({ allServices = [], startDate = new Date(), wholeCalender = true, showNavButtons = true }) => {
	const [currentDate, setCurrentDate] = useState(startDate);
	const [selectedDate, setSelectedDate] = useState(new Date());
	const [isSelectingDate, setIsSelectingDate] = useState(false);
	const datePickerRef = useRef(null);
	const monthStart = startOfMonth(currentDate);
	const monthEnd = endOfMonth(currentDate);

	const monthDays = eachDayOfInterval({ start: monthStart, end: monthEnd });
	const startDay = getDay(monthStart);
	const daysWithEmptyCells = [
		...Array(startDay).fill(null),
		...monthDays
	];

	const weekDays = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
	const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
	const years = Array.from({ length: 21 }, (_, i) => new Date(currentDate).getFullYear() - 10 + i);

	const isToday = (date) => {
		if (!date) return false;
		const td = new Date();
		const today = td.toLocaleDateString("en-CA");
		return (
			new Date(date).toLocaleDateString("en-CA") === today
		);
	};

	useEffect(() => {
		const handleClickOutside = (event) => {
			if (datePickerRef.current && !datePickerRef.current.contains(event.target)) {
				setIsSelectingDate(false);
			}
		};

		document.addEventListener("mousedown", handleClickOutside);
		return () => {
			document.removeEventListener("mousedown", handleClickOutside);
		};
	}, [datePickerRef]);

	const handleDateClick = (date) => {
		if (date) setSelectedDate(date);
	};

	const handlePrevMonth = () => {
		setCurrentDate((prevDate) => new Date(prevDate.getFullYear(), prevDate.getMonth() - 1, 1));
	};

	const handleNextMonth = () => {
		setCurrentDate((prevDate) => new Date(prevDate.getFullYear(), prevDate.getMonth() + 1, 1));
	};

	const handleToday = () => {
		const today = new Date();
		setCurrentDate(new Date(today));
		setSelectedDate(new Date(today));
	};

	const handleMonthYearClick = () => {
		setIsSelectingDate(true);
	};

	const handleMonthChange = (event) => {
		const newMonth = parseInt(event.target.value, 10);
		setCurrentDate((prevDate) => setMonth(prevDate, newMonth));
	};

	const handleYearChange = (event) => {
		const newYear = parseInt(event.target.value, 10);
		setCurrentDate((prevDate) => setYear(prevDate, newYear));
	};

	const renderTodaysButton = (day, index) => {
		const td = new Date();
		td.setHours(0, 0, 0, 0);
		const today = td.toLocaleDateString("en-CA");
		let isCurrentDateToday = false;
		let isPastDay = false;
		let isUnlogged = false;
		let isComplete = false;

		const dayCompare = day ? new Date(day) : null;
		if (dayCompare) {
			dayCompare.setHours(0, 0, 0, 0);
		}

		if (day && dayCompare.getTime() === td.getTime()) {
			isCurrentDateToday = true;
		}

		const filteredServices = Array.isArray(allServices)
			? allServices.filter((el) => {
				if (!day) return false;
				const serviceDate = new Date(el.date.toDate()).toISOString().split("T")[0];
				const currentDate = new Date(day).toLocaleDateString("en-CA");
				return serviceDate === currentDate;
			})
			: [];

		if (filteredServices.length > 0) {
			const todayDate = new Date().toLocaleDateString("en-CA");

			isPastDay = todayDate > dayCompare.toLocaleDateString("en-CA");
			isUnlogged = todayDate > dayCompare.toLocaleDateString("en-CA") &&
				filteredServices.some(service => service.status === "PENDING" || service.status === "INPROGRESS");

			isComplete = filteredServices.some(service => {
				const completedAt = service.completedAt ? new Date(service.completedAt.toDate()).toLocaleDateString("en-CA") : null;
				return completedAt && completedAt === dayCompare.toLocaleDateString("en-CA");
			});

			if (isCurrentDateToday) {
				isComplete = filteredServices.every(service => {
					const completedAt = service.completedAt ? new Date(service.completedAt.toDate()).toLocaleDateString("en-CA") : null;
					return completedAt && completedAt === today;
				});
			}

			console.log("cal test", {
				filteredServices: filteredServices,
				today: todayDate,
				isUnlogged,
				isComplete,
				isPastDay
			});
		}

		const containerClasses = isCurrentDateToday
			? "min-h-6 min-w-6 md:h-10 md:w-10 border border-red-500 border-[3px]  flex items-center justify-center"
			: "min-h-6 min-w-6 md:h-10 md:w-10 flex items-center justify-center";

		let buttonClasses = "h-8 w-8 rounded-full flex items-center justify-center";

		if (!filteredServices.length) {
			buttonClasses += " text-cardTextGray";
			if (day && format(selectedDate, "yyyy-MM-dd") === format(day, "yyyy-MM-dd") && !isToday(new Date(day))) {
				buttonClasses += " bg-green-200";
			}
			
			if (isPastDay && !isUnlogged && !isComplete) {
				buttonClasses += " bg-gray-500";
			}
			
			if (isUnlogged && !isComplete) {
				buttonClasses += " border border-gray-500 bg-transparent text-black";
			}
			
			if (isPastDay && isUnlogged && isComplete) {
				return (
					<div className={containerClasses}>
						<div className="h-8 w-8 rounded-full relative overflow-hidden flex items-center justify-center">
							<div className="absolute left-0 top-0 w-4 h-8 border-t border-b border-l border-gray-500 rounded-l-full"></div>
							<div className="absolute right-0 top-0 w-4 h-8 bg-gray-500 rounded-r-full"></div>
							<p className="z-10 text-cardTextGray">{day ? format(day, "d") : ""}</p>
						</div>
					</div>
				);
			}
			
			if (isCurrentDateToday && isComplete) {
				buttonClasses += " bg-gray-500";
			}

			return (
				<div className={containerClasses}>
					<button
						key={day ? day : `empty-${index}`}
						onClick={() => day && handleDateClick(day)}
						className={buttonClasses}
						disabled={!day || !isSameMonth(day, currentDate)}
					>
						{day ? format(day, "d") : ""}
					</button>
				</div>
			);
		} else {
			const allServiceTypes = filteredServices.map((service) => service?.scheduleData?.serviceType).join(" ");

			if (
				allServiceTypes.includes(SERVICE_TYPES.MEDICAL_WASTE) &&
				allServiceTypes.includes(SERVICE_TYPES.PAPER_SHREDDING)
			) {
				return (
					<div className={containerClasses}>
						<button
							key={day ? day : `empty-${index}`}
							onClick={() => day && handleDateClick(day)}
							className={`h-8 w-8 rounded-full flex items-center justify-center text-cardTextGray relative
								${isCurrentDateToday && isComplete ? "bg-gray-500" : ""}
								${isPastDay && !isUnlogged && isComplete ? "bg-gray-500 text-white" : ""}
								${isUnlogged && !isComplete ? "border border-gray-500 bg-transparent text-black" : "text-white"}`}
							disabled={!day || !isSameMonth(day, currentDate)}
						>
							{isPastDay && isUnlogged && isComplete ? (
								<>
									<div className="absolute left-0 top-0 w-4 h-8 border-t border-b border-l border-gray-500 rounded-l-full"></div>
									<div className="absolute right-0 top-0 w-4 h-8 bg-gray-500 rounded-r-full"></div>
								</>
							) : !isPastDay && (
								<>
									<div className={`w-4 h-8 bg-green-500 rounded-l-full absolute left-0 `}></div>
									<div className={`w-4 h-8 bg-red-500 rounded-r-full absolute right-0`}></div>
								</>
							)}
							<p className="z-10">{day ? format(day, "d") : ""}</p>
						</button>
					</div>
				);
			} else if (allServiceTypes.includes(SERVICE_TYPES.MEDICAL_WASTE) && !isPastDay) {
				return (
					<div className={containerClasses}>
						<button
							key={day ? day : `empty-${index}`}
							onClick={() => day && handleDateClick(day)}
							className={`h-8 w-8 rounded-full flex items-center justify-center text-cardTextGray
								${isCurrentDateToday && isComplete ? "bg-gray-500" : "bg-red-500"}
								text-white`}
							disabled={!day || !isSameMonth(day, currentDate)}
						>
							{day ? format(day, "d") : ""}
						</button>
					</div>
				);
			} else if (allServiceTypes.includes(SERVICE_TYPES.PAPER_SHREDDING) && !isPastDay) {
				return (
					<div className={containerClasses}>
						<button
							key={day ? day : `empty-${index}`}
							onClick={() => day && handleDateClick(day)}
							className={`h-8 w-8 rounded-full flex items-center justify-center text-cardTextGray
								${isCurrentDateToday && isComplete ? "bg-gray-500" : "bg-primaryGreen"}
								text-white`}
							disabled={!day || !isSameMonth(day, currentDate)}
						>
							{day ? format(day, "d") : ""}
						</button>
					</div>
				);
			} else {
				return (
					<div className={containerClasses}>
						{isPastDay && isUnlogged && isComplete ? (
							<div className="h-8 w-8 rounded-full relative overflow-hidden flex items-center justify-center">
								<div className="absolute left-0 top-0 w-4 h-8 border-t border-b border-l border-gray-500 rounded-l-full"></div>
								<div className="absolute right-0 top-0 w-4 h-8 bg-gray-500 rounded-r-full"></div>
								<p className="z-10 text-cardTextGray">{day ? format(day, "d") : ""}</p>
							</div>
						) : (
							<button
								key={day ? day : `empty-${index}`}
								onClick={() => day && handleDateClick(day)}
								className={`h-8 w-8 rounded-full flex items-center justify-center text-cardTextGray
									${isCurrentDateToday && isComplete ? "bg-gray-500" : ""}
									${isPastDay && !isUnlogged && isComplete ? "bg-gray-500 text-white" : ""}
									${isUnlogged && !isComplete ? "border border-gray-500 bg-transparent text-black" : ""}
									${day && format(selectedDate, "yyyy-MM-dd") === format(day, "yyyy-MM-dd") && !isToday(day) ? "bg-green-200" : ""}`}
								disabled={!day || !isSameMonth(day, currentDate)}
							>
								{day ? format(day, "d") : ""}
							</button>
						)}
					</div>
				);
			}
		}
	};

	return (
		<div
			className={`w-full text-calendarHeading min-h-80p mx-auto flex flex-col gap-5 shadow-xl rounded-xl p-5 ${
				new Date().getFullYear() === new Date(currentDate).getFullYear() &&
				new Date().getMonth() === new Date(currentDate).getMonth() &&
				!wholeCalender
					? "border-2 border-solid border-red-500"
					: ""
			}`}
		>
			<div className="flex items-center justify-between mb-2">
				<div className="relative" ref={datePickerRef}>
					<button
						onClick={wholeCalender ? handleMonthYearClick : () => {}}
						className="text-lg xl:pl-1 font-bold focus:outline-none"
					>
						{format(currentDate, "MMM yyyy")}
					</button>
					{isSelectingDate && (
						<div className="absolute top-full left-0 mt-1 bg-white border border-gray-300 rounded shadow-lg p-2 z-10">
							<select
								value={currentDate.getMonth()}
								onChange={handleMonthChange}
								className="block w-full mb-2 p-1 border border-gray-300 rounded"
							>
								{months.map((month, index) => (
									<option key={month} value={index}>
										{month}
									</option>
								))}
							</select>
							<select
								value={currentDate.getFullYear()}
								onChange={handleYearChange}
								className="block w-full p-1 border border-gray-300 rounded"
							>
								{years.map((year) => (
									<option key={year} value={year}>
										{year}
									</option>
								))}
							</select>
						</div>
					)}
				</div>
				
				{showNavButtons && (
					<div className="flex items-center">
						<button onClick={handlePrevMonth} className="mr-2">
							<IoIosArrowBack />
						</button>
						<button onClick={handleNextMonth}>
							<IoIosArrowForward />
						</button>
					</div>
				)}
			</div>
			<div className="grid grid-cols-7 gap-1">
				{weekDays.map((day) => (
					<div key={day} className="text-center font-medium">
						{day}
					</div>
				))}
			</div>
			<div className="grid grid-cols-7 gap-1">
				{daysWithEmptyCells.map((day, index) => (
					<div key={index} className="flex justify-center">
						{day ? renderTodaysButton(day, index) : <div className="min-h-6 min-w-6 md:h-10 md:w-10"></div>}
					</div>
				))}
			</div>
		</div>
	);
};

export default CalendarWithTimeSlots;
