import React, { useEffect, useState, useRef } from "react";
import { Link, useNavigate } from "react-router-dom";
import Loader from "../../../components/UI/loaders/Loader";
import { collection, doc, getDoc, updateDoc, writeBatch, onSnapshot } from "firebase/firestore";
import MultiselectDropdown from "../../../components/UI/dropdowns/MultiselectDropdown";
import { formattedDateTime, renderAddress } from "../../../utils/helpers";
import Dropdown from "../../../components/UI/dropdowns/Dropdown";
import { RxCross2 } from "react-icons/rx";
import { SERVICE_STATUS, serviceTypes } from "../../../utils/constants";
import { COLLECTIONS } from "../../../config/firebase";
import SearchableDropdownForParents from "../../../components/UI/dropdowns/SearchableDropdownForParents";
import { SsrOctoInfoPanel } from "./SubcontractorServiceRequest";

const PendingConnections = (props) => {
	const {
		user,
		db,
		sharedSubcontractors = [],
		sharedItemsMap = {},
		allServiceFrequencies = [],
		fetchDocumentsInBatches,
		formatAdd,
		fetchContractorData,
	} = props;

	const [isLoading, setIsLoading] = useState(false);
	const [generators, setGenerators] = useState([]);
	const [allDatas, setAllDatas] = useState([]);
	const [filteredData, setFilteredData] = useState([]);
	const [genIds, setGenIds] = useState([]);
	const [pendingCons, setPendingCons] = useState([]);
	const [currentTransporterData, setCurrentTransporterData] = useState(null);
	const [isModalOpen, setIsModalOpen] = useState(false);
	const [showAvailableSubCont, setShowAvailableSubCont] = useState(false);
	const [subContractors, setSubContractors] = useState(sharedSubcontractors || []);
	const [subContractorData, setSubContractorData] = useState([]);
	const [selectedSubAssignee, setSelectedSubAssignee] = useState("");
	const [toDelete, setToDelete] = useState(null);
	const [subcontractorOptions, setSubcontractorOptions] = useState([{ label: "All", value: "all" }]);
	const [selectedSubcontractors, setSelectedSubcontractors] = useState([]);
	const [isOctoMarketUser, setIsOctoMarketUser] = useState(false);
	const navigate = useNavigate();
	const [itemsMap, setItemsMap] = useState(sharedItemsMap || {});
	const [liveSubcontractorNames, setLiveSubcontractorNames] = useState({});

	const statusOptions = [
		{ label: "All", value: "all" },
		{ label: "Pending", value: SERVICE_STATUS.PENDING },
		{ label: "Accepted", value: SERVICE_STATUS.ACCEPTED },
		{ label: "Declined", value: SERVICE_STATUS.DECLINED },
		{ label: "Canceled", value: SERVICE_STATUS.CANCELLED },
		{ label: "Termination Requested", value: "TERMINATED" },
		{ label: "Terminated", value: "TERMINATEACCEPTED" },
	];

	const [selectedStatuses, setSelectedStatuses] = useState([SERVICE_STATUS.PENDING, "TERMINATED"]);

	const fetchSubcontractorDisplayNames = async (subcontractorIds) => {
		if (!subcontractorIds || subcontractorIds.length === 0 || !db) return;

		try {
			const displayNames = { ...liveSubcontractorNames };

			await Promise.all(
				subcontractorIds.map(async (subcontractorId) => {
					if (displayNames[subcontractorId]) return;

					const subContractorRef = doc(db, COLLECTIONS.transporters, subcontractorId);
					const subContractorSnap = await getDoc(subContractorRef);

					if (subContractorSnap.exists()) {
						const subContractorData = subContractorSnap.data();
						displayNames[subcontractorId] =
							subContractorData.companyDisplayName ||
							subContractorData.companyName ||
							subContractorData.transporterName ||
							"Unknown Subcontractor";
					}
				})
			);

			setLiveSubcontractorNames(displayNames);
		} catch (error) {
			console.error("Error fetching subcontractor display names:", error);
		}
	};

	useEffect(() => {
		if (sharedItemsMap && Object.keys(sharedItemsMap).length > 0) {
			setItemsMap(sharedItemsMap);
		} else {
			const unsubscribe = onSnapshot(collection(db, COLLECTIONS.defaultPriceBook, "services", "containers"), (snap) => {
				if (snap.docs.length) {
					let tempMap = {};
					snap.docs.forEach((el) => {
						tempMap[el.id] = el.data()?.masterItemName ?? "--";
					});
					setItemsMap(tempMap);
				}
			});
			return () => {
				if (unsubscribe) unsubscribe();
			};
		}
	}, [sharedItemsMap, db]);

	useEffect(() => {
		if (sharedSubcontractors && sharedSubcontractors.length > 0) {
			setSubContractors(sharedSubcontractors);
			setSubContractorData(sharedSubcontractors);

			const options = [
				{ label: "All", value: "all" },
				...sharedSubcontractors.map((contractor) => ({
					label: contractor.contractorName || contractor.name || "Unknown",
					value: contractor.id,
				})),
			];

			setSubcontractorOptions(options);
			setSelectedSubcontractors(["all", ...sharedSubcontractors.map((contractor) => contractor.id)]);

			const subcontractorIds = sharedSubcontractors.map((sub) => sub.id).filter(Boolean);
			fetchSubcontractorDisplayNames(subcontractorIds);
		} else {
			const loadContractorData = async () => {
				if (!user?.uid || fetchContractorData) return;

				try {
					const { contractors, isOctoMarketUser: isOcto } = await fetchContractorData(user.uid, db, COLLECTIONS);
					setSubContractorData(contractors);
					setIsOctoMarketUser(isOcto);

					const options = [
						{ label: "All", value: "all" },
						...contractors.map((contractor) => ({
							label: contractor.contractorName || contractor.name || "Unknown",
							value: contractor.id,
						})),
					];

					setSubcontractorOptions(options);
					setSelectedSubcontractors(["all", ...contractors.map((contractor) => contractor.id)]);

					setSubContractors(contractors);

					const subcontractorIds = contractors.map((sub) => sub.id).filter(Boolean);
					fetchSubcontractorDisplayNames(subcontractorIds);
				} catch (error) {
					console.error("Error loading contractors:", error);
				}
			};

			loadContractorData();
		}
	}, [sharedSubcontractors, user?.uid, db, COLLECTIONS, fetchContractorData]);

	const fetchAllPendingConnectionsData = async (transporterId) => {
		if (!transporterId) {
			console.error("No transporter ID provided");
			return;
		}

		try {
			setIsLoading(true);
			const transporterDoc = await getDoc(doc(collection(db, COLLECTIONS.transporters), transporterId));
			if (transporterDoc.exists()) {
				setCurrentTransporterData({ id: transporterId, ...transporterDoc.data() });
				let sharedGenerators = transporterDoc.data()?.sharedGenerators;
				let pendingConns = Array.isArray(sharedGenerators?.fromMe) ? sharedGenerators?.fromMe : [];
				let pending = [],
					ids = [];
				pendingConns?.forEach((item) => {
					if (item) {
						pending.push(item);
						if (item?.genId) ids.push(item?.genId);
					}
				});
				setPendingCons(pending);
				setGenIds(ids);
				const subcontractorIds = pendingConns.map((item) => item?.subcontractorId).filter(Boolean);

				fetchSubcontractorDisplayNames(subcontractorIds);
			} else {
				console.error(`Transporter ${transporterId} does not exist`);
			}
		} catch (error) {
			console.error(`Error fetching transporter ${transporterId}:`, error);
		} finally {
			setIsLoading(false);
		}
	};

	useEffect(() => {
		if (user?.uid) fetchAllPendingConnectionsData(user?.uid);
	}, [user?.uid]);

	const fetchGens = async () => {
		if (!genIds.length || !fetchDocumentsInBatches) return;

		try {
			setIsLoading(true);
			let resp = await fetchDocumentsInBatches(db, COLLECTIONS.generators, genIds);
			setGenerators(resp);
		} catch (error) {
			console.log({ error });
		} finally {
			setIsLoading(false);
		}
	};

	useEffect(() => {
		fetchGens();
	}, [genIds, fetchDocumentsInBatches]);

	useEffect(() => {
		let latestPendingCons = pendingCons.map((connection) => {
			let gen = generators.find((item) => connection.genId === item.id) || {};
			return {
				...gen,
				...connection,
				serviceType: connection.serviceType || gen?.serviceType,
				serviceFrequency: connection.serviceFrequency,
				weekdays: connection.weekdays || [],
				serviceDuration: connection.serviceDuration || "",
				expectedItemsOrServices: connection.expectedItemsOrServices || [],
				serviceNote: connection.serviceNote || "",
				requestedStartDate: connection.requestedStartDate || "",
				status: connection.status || SERVICE_STATUS.PENDING,
				ssrId: connection.ssrId || "",
				transporterName: connection.transporterName || "",
				subcontractorId: connection.subcontractorId || "",
				subContractorName: connection.subContractorName || "",
			};
		});

		latestPendingCons = latestPendingCons.sort((a, b) => {
			let dateA, dateB;

			if (a.timeStamp && typeof a.timeStamp.toDate === "function") {
				dateA = a.timeStamp.toDate();
			} else if (a.timeStamp instanceof Date) {
				dateA = a.timeStamp;
			} else if (a.timeStamp) {
				dateA = new Date(a.timeStamp);
			} else {
				dateA = new Date(0);
			}

			if (b.timeStamp && typeof b.timeStamp.toDate === "function") {
				dateB = b.timeStamp.toDate();
			} else if (b.timeStamp instanceof Date) {
				dateB = b.timeStamp;
			} else if (b.timeStamp) {
				dateB = new Date(b.timeStamp);
			} else {
				dateB = new Date(0);
			}
			return dateB - dateA;
		});

		setAllDatas(latestPendingCons);
		setFilteredData(latestPendingCons);

		const subcontractorIds = latestPendingCons.map((item) => item.subcontractorId).filter(Boolean);

		fetchSubcontractorDisplayNames(subcontractorIds);
	}, [generators, pendingCons]);

	useEffect(() => {
		let filtered = allDatas;

		if (!selectedSubcontractors.includes("all") && selectedSubcontractors.length > 0) {
			filtered = filtered.filter((item) => selectedSubcontractors.includes(item.subcontractorId));
		}
		const hasSubcontractorFilter = selectedSubcontractors.length > 0;
		const hasStatusFilter = selectedStatuses.length > 0;
		if (!hasSubcontractorFilter || !hasStatusFilter) {
			setFilteredData([]);
			return;
		}

		if (!selectedStatuses.includes("all") && selectedStatuses.length > 0) {
			filtered = filtered.filter((item) => selectedStatuses.includes(item.status));
		}

		filtered = [...filtered].sort((a, b) => {
			let dateA, dateB;

			if (a.timeStamp && typeof a.timeStamp.toDate === "function") {
				dateA = a.timeStamp.toDate();
			} else if (a.timeStamp instanceof Date) {
				dateA = a.timeStamp;
			} else if (a.timeStamp) {
				dateA = new Date(a.timeStamp);
			} else {
				dateA = new Date(0);
			}

			if (b.timeStamp && typeof b.timeStamp.toDate === "function") {
				dateB = b.timeStamp.toDate();
			} else if (b.timeStamp instanceof Date) {
				dateB = b.timeStamp;
			} else if (b.timeStamp) {
				dateB = new Date(b.timeStamp);
			} else {
				dateB = new Date(0);
			}
			return dateB - dateA;
		});

		setFilteredData(filtered);
	}, [allDatas, selectedSubcontractors, selectedStatuses]);

	const handleSubcontractorChange = (selected) => {
		if (selected.includes("all") && !selectedSubcontractors.includes("all")) {
			setSelectedSubcontractors(["all", ...subContractorData.map((contractor) => contractor.id)]);
		} else if (!selected.includes("all") && selectedSubcontractors.includes("all")) {
			setSelectedSubcontractors(selected.filter((status) => status !== "all"));
		} else {
			setSelectedSubcontractors(selected);
		}
	};

	const handleStatusChange = (selected) => {
		if (selected.includes("all") && !selectedStatuses.includes("all")) {
			setSelectedStatuses([
				"all",
				...statusOptions.filter((option) => option.value !== "all").map((option) => option.value),
			]);
		} else if (!selected.includes("all") && selectedStatuses.includes("all")) {
			setSelectedStatuses(selected.filter((status) => status !== "all"));
		} else {
			setSelectedStatuses(selected);
		}
	};

	const handleClearFilters = () => {
		setSelectedSubcontractors(["all", ...subContractorData.map((contractor) => contractor.id)]);
		setSelectedStatuses([SERVICE_STATUS.PENDING]);
		console.log("Filters cleared");
	};

	const [showCancelDialog, setShowCancelDialog] = useState(false);
	const [cancelReason, setCancelReason] = useState("");
	const [cancelRequestDetails, setCancelRequestDetails] = useState(null);

	const handleReject = async (generatorId, subcontractorId, ssrId) => {
		if (showCancelDialog && !cancelReason) {
			console.error("Cancellation reason is required");
			return;
		}

		try {
			console.log("Reject parameters:", { generatorId, subcontractorId, ssrId, cancelReason });

			if (!user?.uid) {
				console.error("User not logged in");
				return;
			}

			if (!generatorId || !subcontractorId) {
				console.error("Missing generator or subcontractor ID");
				return;
			}

			setIsLoading(true);

			const batch = writeBatch(db);

			let currTransporterRef = doc(db, COLLECTIONS.transporters, user.uid);
			let currTransporterData = await getDoc(currTransporterRef);

			if (!currTransporterData.exists()) {
				console.error("Current transporter document does not exist");
				return;
			}
			let currTransporterSharedGens = currTransporterData.data()?.sharedGenerators ?? {};
			let newTransporterSharedGen = Array.isArray(currTransporterSharedGens?.fromMe)
				? currTransporterSharedGens.fromMe.map((item) => {
						if (
							(ssrId && item.ssrId === ssrId) ||
							(!ssrId && item.genId === generatorId && item.subcontractorId === subcontractorId)
						) {
							return {
								...item,
								status: SERVICE_STATUS.CANCELLED,
								cancelReason: cancelReason || "No reason provided",
								cancelledAt: new Date().toISOString(),
							};
						}
						return item;
				  })
				: [];

			batch.update(currTransporterRef, {
				sharedGenerators: {
					...currTransporterSharedGens,
					fromMe: newTransporterSharedGen,
				},
			});

			let subContractorRef = doc(db, COLLECTIONS.transporters, subcontractorId);
			let subContractorData = await getDoc(subContractorRef);

			if (!subContractorData.exists()) {
				console.error("Subcontractor document does not exist");
				return;
			}

			let subContractorSharedGens = subContractorData.data()?.sharedGenerators ?? {};
			let newSubContractorSharedGen = Array.isArray(subContractorSharedGens?.toMe)
				? subContractorSharedGens.toMe.map((item) => {
						if (
							(ssrId && item.ssrId === ssrId) ||
							(!ssrId && item.genId === generatorId && item.transporterId === user.uid)
						) {
							return {
								...item,
								status: SERVICE_STATUS.CANCELLED,
								cancelReason: cancelReason || "No reason provided",
								cancelledAt: new Date().toISOString(),
							};
						}
						return item;
				  })
				: [];

			batch.update(subContractorRef, {
				sharedGenerators: {
					...subContractorSharedGens,
					toMe: newSubContractorSharedGen,
				},
			});

			await batch.commit();

			setShowCancelDialog(false);
			setCancelReason("");
			setCancelRequestDetails(null);

			await fetchAllPendingConnectionsData(user.uid);
		} catch (error) {
			console.error("Error in handleReject:", error);
		} finally {
			setIsLoading(false);
		}
	};

	const handleReAssign = async (generatorId, subcontractorId, ssrId, originalService) => {
		if (!generatorId || !subcontractorId || !selectedSubAssignee || !user?.uid) {
			console.error("Missing required parameters for reassignment", {
				generatorId,
				subcontractorId,
				selectedSubAssignee,
				userId: user?.uid,
			});
			return;
		}

		setIsLoading(true);
		const isTerminatedService = originalService?.status === "TERMINATEACCEPTED";

		if (subcontractorId === selectedSubAssignee && !isTerminatedService) {
			try {
				const batch = writeBatch(db);
				const currentTransporterRef = doc(db, COLLECTIONS.transporters, user.uid);
				const existingSubContractorRef = doc(db, COLLECTIONS.transporters, subcontractorId);

				const [currentTransporterDoc, existingSubContractorDoc] = await Promise.all([
					getDoc(currentTransporterRef),
					getDoc(existingSubContractorRef),
				]);

				if (!currentTransporterDoc.exists() || !existingSubContractorDoc.exists()) {
					console.error("One or more required documents do not exist");
					return;
				}

				let currTransporterSharedGens = currentTransporterDoc.data()?.sharedGenerators ?? {};
				let existingSubContractorSharedGens = existingSubContractorDoc.data()?.sharedGenerators ?? {};
				const updatedFromMe = Array.isArray(currTransporterSharedGens.fromMe)
					? currTransporterSharedGens.fromMe.map((item) => {
							if (
								(ssrId && item.ssrId === ssrId) ||
								(!ssrId && item.genId === generatorId && item.subcontractorId === subcontractorId)
							) {
								return {
									...item,
									status: SERVICE_STATUS.PENDING,
									timeStamp: new Date(),
									updatedAt: new Date().toISOString(),
								};
							}
							return item;
					  })
					: [];

				const updatedToMe = Array.isArray(existingSubContractorSharedGens.toMe)
					? existingSubContractorSharedGens.toMe.map((item) => {
							if (
								(ssrId && item.ssrId === ssrId) ||
								(!ssrId && item.genId === generatorId && item.transporterId === user.uid)
							) {
								return {
									...item,
									status: SERVICE_STATUS.PENDING,
									timeStamp: new Date(),
									updatedAt: new Date().toISOString(),
								};
							}
							return item;
					  })
					: [];

				batch.update(currentTransporterRef, {
					sharedGenerators: {
						...currTransporterSharedGens,
						fromMe: updatedFromMe,
					},
				});

				batch.update(existingSubContractorRef, {
					sharedGenerators: {
						...existingSubContractorSharedGens,
						toMe: updatedToMe,
					},
				});

				await batch.commit();
				await fetchAllPendingConnectionsData(user.uid);
			} catch (error) {
				console.error("Error reassigning to same contractor:", error);
			} finally {
				setIsLoading(false);
				setShowAvailableSubCont(false);
				setIsModalOpen(false);
				setSelectedSubAssignee("");
			}
			return;
		}

		try {
			const batch = writeBatch(db);

			const currentTransporterRef = doc(db, COLLECTIONS.transporters, user.uid);
			const assigneeSubContractorRef = doc(db, COLLECTIONS.transporters, selectedSubAssignee);
			const existingSubContractorRef = doc(db, COLLECTIONS.transporters, subcontractorId);

			const [currentTransporterDoc, assigneeSubContractorDoc, existingSubContractorDoc] = await Promise.all([
				getDoc(currentTransporterRef),
				getDoc(assigneeSubContractorRef),
				getDoc(existingSubContractorRef),
			]);

			if (!currentTransporterDoc.exists() || !assigneeSubContractorDoc.exists() || !existingSubContractorDoc.exists()) {
				console.error("One or more required documents do not exist");
				return;
			}

			let currTransporterSharedGens = currentTransporterDoc.data()?.sharedGenerators ?? {};
			let assigneeSubContractorSharedGens = assigneeSubContractorDoc.data()?.sharedGenerators ?? {};
			let existingSubContractorSharedGens = existingSubContractorDoc.data()?.sharedGenerators ?? {};

			const filteredCurrFromMe = Array.isArray(currTransporterSharedGens.fromMe)
				? isTerminatedService
					? [...currTransporterSharedGens.fromMe]
					: currTransporterSharedGens.fromMe.filter((item) => {
							if (ssrId && item.ssrId) {
								return item.ssrId !== ssrId;
							}
							return !(item.genId === generatorId && item.subcontractorId === subcontractorId);
					  })
				: [];

			const cleanedService = { ...originalService };
			// Remove any termination-related fields
			delete cleanedService.status;
			delete cleanedService.cancelReason;
			delete cleanedService.cancelledAt;
			delete cleanedService.terminationNote;
			delete cleanedService.terminationAcceptedAt;
			delete cleanedService.terminationAcceptedBy;
			delete cleanedService.requestedTerminationDate;
			delete cleanedService.requester;
			delete cleanedService.requesterEmail;
			delete cleanedService.requesterPhone;

			const newSsrId = Date.now().toString();
			const newCurrServiceEntry = {
				...cleanedService,
				status: SERVICE_STATUS.PENDING,
				genId: generatorId,
				timeStamp: new Date(),
				createdAt: new Date().toISOString(),
				subcontractorId: selectedSubAssignee,
				subContractorName: assigneeSubContractorDoc.data().companyDisplayName || "Unknown",
				transporterId: user.uid,
				transporterName: currentTransporterDoc.data().companyDisplayName || "Unknown",
				ssrId: newSsrId,
			};

			filteredCurrFromMe.push(newCurrServiceEntry);

			const newAssigneeServiceEntry = {
				...cleanedService,
				status: SERVICE_STATUS.PENDING,
				genId: generatorId,
				timeStamp: new Date(),
				createdAt: new Date().toISOString(),
				transporterId: user.uid,
				transporterName: currentTransporterDoc.data().companyDisplayName || "Unknown",
				subcontractorId: selectedSubAssignee,
				subContractorName: assigneeSubContractorDoc.data().companyDisplayName || "Unknown",
				ssrId: newSsrId,
			};

			if (!isTerminatedService) {
				const filteredExistingToMe = Array.isArray(existingSubContractorSharedGens.toMe)
					? existingSubContractorSharedGens.toMe.filter((item) => {
							if (ssrId && item.ssrId) {
								return item.ssrId !== ssrId;
							}
							return !(item.genId === generatorId && item.transporterId === user.uid);
					  })
					: [];

				batch.update(existingSubContractorRef, {
					sharedGenerators: {
						...existingSubContractorSharedGens,
						toMe: filteredExistingToMe,
					},
				});
			}

			batch.update(currentTransporterRef, {
				sharedGenerators: {
					...currTransporterSharedGens,
					fromMe: filteredCurrFromMe,
				},
			});

			batch.update(assigneeSubContractorRef, {
				sharedGenerators: {
					...assigneeSubContractorSharedGens,
					toMe: [...(assigneeSubContractorSharedGens.toMe || []), newAssigneeServiceEntry],
				},
			});

			await batch.commit();

			await fetchAllPendingConnectionsData(user.uid);
		} catch (error) {
			console.error("Error reassigning generator:", error);
		} finally {
			setIsLoading(false);
			setShowAvailableSubCont(false);
			setIsModalOpen(false);
			setSelectedSubAssignee("");
		}
	};

	const handleSubContractorAvailability = async () => {
		setShowAvailableSubCont(true);
		if (toDelete?.subContractorId) {
			setSelectedSubAssignee(toDelete.subContractorId);
		}

		if (subContractors.length === 0 && fetchContractorData) {
			try {
				const { contractors } = await fetchContractorData(user?.uid, db, COLLECTIONS);
				setSubContractors(contractors);
			} catch (error) {
				console.error("Error loading contractors for reassignment:", error);
			}
		}
	};
	const capitalizeFirstLetter = (string) => {
		if (!string) return "";
		return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
	};

	return (
		<div className="p-6">
			<div className="main-container flex flex-col border border-cardBorderCol bg-white rounded-cardRadii h-full">
				<div className="text-lg px-8 py-4 flex items-center gap-2">
					<div className="flex flex-col gap-2">
						<div className="text-xl xl:text-2xl font-semibold text-black flex gap-4 items-center">
							<h1>Outgoing SSR</h1>
							<SsrOctoInfoPanel />
						</div>
						<h6 className="text-nowrap text-sm font-normal text-cardTextGray ">
							{filteredData?.length} of {allDatas.length} Requests
						</h6>
					</div>
					<div className="flex items-center gap-3 ml-auto">
						<MultiselectDropdown
							className="px-4"
							buttonText="Subcontractor"
							options={subcontractorOptions}
							selectedOptions={selectedSubcontractors}
							onSelectedOptionsChange={handleSubcontractorChange}
						/>
						<MultiselectDropdown
							className="px-4"
							buttonText="Status"
							options={statusOptions}
							selectedOptions={selectedStatuses}
							onSelectedOptionsChange={handleStatusChange}
						/>
						<button className="px-2 text-primary text-nowrap hover:text-blue-900 text-sm" onClick={handleClearFilters}>
							Clear Filters
						</button>
					</div>
				</div>

				<div className="overflow-x-scroll overflow-y-hidden">
					<div className="bg-[#E5F2FF] flex font-medium min-w-fit py-4 px-8">
						<div className="flex items-center">
							<div className="truncate w-60">Subcontractor Name</div>
							<div className="truncate w-40">OCTO Number</div>
							<div className="truncate w-60">Generator Name</div>
							<div className="truncate w-80">Service Address</div>
							<div className="truncate w-80">Service Type</div>
							<div className="truncate w-60">Service Frequency</div>
							<div className="truncate w-60">Expected Containers</div>
							<div className="truncate w-60">Date/Time</div>
							<div className="truncate w-32">Status</div>
							<div className="truncate w-48 text-center">Action</div>
						</div>
					</div>

					<div className={`min-w-fit overflow-y-scroll min-h-40 h-[50vh] overflow-x-scroll`}>
						{isLoading ? (
							<Loader height="h-12 pt-4" />
						) : filteredData.length > 0 ? (
							filteredData.map((generator, index) => (
								<div
									key={`${generator.ssrId || `${generator.genId}-${index}`}`}
									className={`flex w-full items-center px-8 transition-colors duration-300 min-h-[45px]
									 ${index < filteredData.length - 1 ? "border-b border-gray-300" : ""} `}
								>
									<div className={`w-full flex items-center`}>
										<div className="truncate w-60 h-full">
											{liveSubcontractorNames[generator?.subcontractorId] || generator?.subContractorName || "--"}
										</div>
										<Link
											to={`/admin/generators/${generator.id}/generator-dashboard`}
											className="w-40 h-full text-cardTextBlue truncate"
										>
											{generator.octoNumber ?? "--"}
										</Link>{" "}
										<div className="truncate w-60 h-full">{generator.generatorName ?? "--"}</div>
										<div className="truncate w-80 h-full">{renderAddress(generator.serviceAddress)}</div>
										<div className="truncate h-full w-80">
											{generator.serviceType?.length > 0 ? (
												Array.isArray(generator.serviceType) ? (
													generator.serviceType.map((type, i) => (
														<span key={i} className="whitespace-nowrap">
															{serviceTypes.find((item) => item.value === type)?.label || type}
															{i < generator.serviceType.length - 1 ? ", " : ""}
														</span>
													))
												) : (
													<span>
														{serviceTypes.find((item) => item.value === generator.serviceType)?.label ||
															generator.serviceType}
													</span>
												)
											) : (
												"--"
											)}
										</div>
										<div className="truncate h-full w-60">
											{generator.serviceFrequency
												? allServiceFrequencies?.find((el) => el.value === generator.serviceFrequency)?.label ?? "N/A"
												: "N/A"}
										</div>
										<div className="h-full w-60 overflow-hidden">
											{generator.expectedItemsOrServices?.length > 0 ? (
												<div className="flex flex-wrap gap-1">
													{generator.expectedItemsOrServices.map((itemObj, idx) => (
														<div key={idx} className="inline-flex items-center text-sm">
															<span className="font-medium whitespace-nowrap"> ({itemObj?.quantity || 1}) </span>
															<span className="truncate max-w-44 ml-1">
																{itemsMap?.[itemObj?.item] || itemObj?.item}
															</span>
														</div>
													))}
												</div>
											) : (
												"--"
											)}
										</div>
										<div className="truncate h-full w-60">{formattedDateTime(generator.timeStamp) ?? "--"}</div>
										<div className="h-full w-48">
											<p className="whitespace-normal break-words text-sm">
												{generator.cancelReason ? generator.cancelReason : ""}
											</p>
											<p className="font-medium mt-1">
												{capitalizeFirstLetter(
													generator.status === "TERMINATED"
														? "Termination Requested"
														: generator.status === "TERMINATEACCEPTED"
														? "Terminated"
														: generator.status
												)}
											</p>
										</div>
										<div className="flex gap-2 w-48 items-center">
											<button
												onClick={() => {
													if (generator.genId && generator.subcontractorId) {
														setCancelRequestDetails({
															generatorId: generator.genId,
															subContractorId: generator.subcontractorId,
															ssrId: generator.ssrId,
														});
														setShowCancelDialog(true);
													} else {
														console.error("Missing data for cancellation", generator);
													}
												}}
												className={`bg-[#F3F3F3] hover:bg-[#E0E0E0] rounded-full w-24 p-1 px-4 ${
													generator.status != SERVICE_STATUS.PENDING ? "opacity-50 cursor-not-allowed" : ""
												}`}
												disabled={generator.status !== SERVICE_STATUS.PENDING}
											>
												Cancel
											</button>
											<button
												className={`px-4 py-1 text-nowrap transition-colors duration-200 text-white rounded-full ${
													generator.status === SERVICE_STATUS.ACCEPTED || generator.status === "TERMINATED"
														? "bg-gray-400 opacity-50 cursor-not-allowed"
														: "bg-primary hover:bg-primary/90"
												}`}
												onClick={() => {
													if (generator.genId && generator.subcontractorId) {
														setIsModalOpen(true);
														setToDelete({
															generatorId: generator.genId,
															subContractorId: generator.subcontractorId,
															ssrId: generator.ssrId,
															originalService: generator,
														});
													} else {
														console.error("Missing data for reassignment", generator);
													}
												}}
												disabled={generator.status === SERVICE_STATUS.ACCEPTED || generator.status === "TERMINATED"}
											>
												Reassign
											</button>
										</div>
									</div>
								</div>
							))
						) : (
							<div className="flex min-h-40 text-cardTextGray text-lg justify-center items-center">
								<p>No result found</p>
							</div>
						)}
					</div>
				</div>
			</div>

			{isModalOpen && (
				<div className="z-40 fixed inset-0 bg-[#CCCCCC87] bg-opacity-50 flex justify-center items-center">
					<div className="bg-white z-20 rounded-cardRadii max-w-md w-full min-h-fit">
						{!showAvailableSubCont ? (
							<div className="flex flex-col justify-between min-h-52 p-6">
								<h6 className="text-2xl font-semibold">Are you sure?</h6>
								<p className="text-lg">You are about to assign this generator to new subcontractor.</p>
								<div className="flex justify-end gap-2">
									<button onClick={() => setIsModalOpen(false)} className="bg-[#F3F3F3] rounded-full w-24 p-1 px-4">
										No
									</button>
									<button
										onClick={handleSubContractorAvailability}
										className={`px-4 py-1 w-24 bg-primary transition-colors duration-200 text-white rounded-full`}
									>
										Yes
									</button>
								</div>
							</div>
						) : (
							<div className="flex flex-col justify-between min-h-40 p-6">
								<h6 className="text-2xl font-semibold mb-4">Reassign</h6>
								<div>
									{isLoading ? (
										<Loader height="h-12 pt-4" />
									) : (
										<SearchableDropdownForParents
											label="Subcontractor"
											options={subContractors.map((sub) => ({
												label: liveSubcontractorNames[sub.id] || sub.contractorName || sub.name || "Unknown",
												value: sub.id,
												octoNumber: sub.octoNumber || "",
												internalAccountNumber: sub.internalAccountNumber || "",
											}))}
											value={selectedSubAssignee}
											onChange={(val) => setSelectedSubAssignee(val)}
											placeholder="Search subcontractors..."
											styles="flex-col min-w-full"
										/>
									)}
								</div>
								<div className="flex justify-end gap-2 mt-6">
									<button
										onClick={() => {
											setShowAvailableSubCont(false);
											setIsModalOpen(false);
										}}
										className="bg-[#F3F3F3] rounded-full w-24 p-1 px-4"
									>
										Cancel
									</button>
									<button
										onClick={() => {
											if (selectedSubAssignee && toDelete?.generatorId && toDelete?.subContractorId) {
												handleReAssign(
													toDelete.generatorId,
													toDelete.subContractorId,
													toDelete.ssrId,
													toDelete.originalService
												);
											} else {
												console.error("Missing data for reassignment", {
													selectedSubAssignee,
													toDelete,
												});
											}
										}}
										className={`px-4 py-1 w-36 bg-primary transition-colors duration-200 text-white rounded-full ${
											!selectedSubAssignee ? "opacity-50 cursor-not-allowed" : ""
										}`}
										disabled={!selectedSubAssignee || isLoading}
									>
										Reassign
									</button>
								</div>
							</div>
						)}
					</div>
				</div>
			)}
			{/* Cancel Service Request Dialog */}
			<dialog open={showCancelDialog} className="modal">
				<div className="modal-box">
					<div>
						<button
							className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
							type="button"
							onClick={() => {
								setShowCancelDialog(false);
								setCancelReason("");
								setCancelRequestDetails(null);
							}}
						>
							✕
						</button>
					</div>
					<h3 className="font-bold text-lg">Are You Sure?</h3>
					<div className="flex py-5 gap-5 flex-col">
						<p className="">Proceeding with this operation will cancel the Subcontractor Service Request.</p>
						<p>Enter Note for Cancelation *</p>
						<textarea
							rows={3}
							value={cancelReason}
							onChange={(e) => setCancelReason(e.target.value)}
							className="w-full text-cardTextGray bg-inputBg border-none rounded-[20px] py-2 h-28 px-2 leading-tight focus:outline-none focus:ring-1 focus:ring-dashInActiveBtnText"
							required
						/>
					</div>
					<div className="flex w-full justify-between">
						<button
							className="btn btn-error btn-sm"
							type="button"
							onClick={() => {
								if (cancelRequestDetails) {
									handleReject(
										cancelRequestDetails.generatorId,
										cancelRequestDetails.subContractorId,
										cancelRequestDetails.ssrId
									);
								}
							}}
						>
							Cancel Request
						</button>
						<button
							type="button"
							className="btn btn-primary btn-sm"
							onClick={() => {
								setShowCancelDialog(false);
								setCancelReason("");
								setCancelRequestDetails(null);
							}}
						>
							Keep Request
						</button>
					</div>
				</div>
			</dialog>
		</div>
	);
};

export default PendingConnections;
